package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DependencyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependencyAllPropertiesEquals(Dependency expected, Dependency actual) {
        assertDependencyAutoGeneratedPropertiesEquals(expected, actual);
        assertDependencyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependencyAllUpdatablePropertiesEquals(Dependency expected, Dependency actual) {
        assertDependencyUpdatableFieldsEquals(expected, actual);
        assertDependencyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependencyAutoGeneratedPropertiesEquals(Dependency expected, Dependency actual) {
        assertThat(expected)
            .as("Verify Dependency auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependencyUpdatableFieldsEquals(Dependency expected, Dependency actual) {
        assertThat(expected)
            .as("Verify Dependency relevant properties")
            .satisfies(e -> assertThat(e.getFirstSubcontentId()).as("check firstSubcontentId").isEqualTo(actual.getFirstSubcontentId()))
            .satisfies(e -> assertThat(e.getSecondSubcontentId()).as("check secondSubcontentId").isEqualTo(actual.getSecondSubcontentId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDependencyUpdatableRelationshipsEquals(Dependency expected, Dependency actual) {
        assertThat(expected)
            .as("Verify Dependency relationships")
            .satisfies(e -> assertThat(e.getSubcontent()).as("check subcontent").isEqualTo(actual.getSubcontent()));
    }
}
