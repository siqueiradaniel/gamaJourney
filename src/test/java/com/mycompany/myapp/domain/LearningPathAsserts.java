package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LearningPathAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLearningPathAllPropertiesEquals(LearningPath expected, LearningPath actual) {
        assertLearningPathAutoGeneratedPropertiesEquals(expected, actual);
        assertLearningPathAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLearningPathAllUpdatablePropertiesEquals(LearningPath expected, LearningPath actual) {
        assertLearningPathUpdatableFieldsEquals(expected, actual);
        assertLearningPathUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLearningPathAutoGeneratedPropertiesEquals(LearningPath expected, LearningPath actual) {
        assertThat(expected)
            .as("Verify LearningPath auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLearningPathUpdatableFieldsEquals(LearningPath expected, LearningPath actual) {
        assertThat(expected)
            .as("Verify LearningPath relevant properties")
            .satisfies(e -> assertThat(e.getExamId()).as("check examId").isEqualTo(actual.getExamId()))
            .satisfies(e -> assertThat(e.getSubcontentId()).as("check subcontentId").isEqualTo(actual.getSubcontentId()))
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLearningPathUpdatableRelationshipsEquals(LearningPath expected, LearningPath actual) {
        assertThat(expected)
            .as("Verify LearningPath relationships")
            .satisfies(e -> assertThat(e.getExam()).as("check exam").isEqualTo(actual.getExam()))
            .satisfies(e -> assertThat(e.getSubcontent()).as("check subcontent").isEqualTo(actual.getSubcontent()));
    }
}
